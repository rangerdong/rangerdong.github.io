<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/09/12/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[lnmp开发环境搭建 + mysql主从配置]]></title>
      <url>/2017/09/11/lnmp-env-build/</url>
      <content type="html"><![CDATA[<p>现在的开发倾向于往虚拟机上进行开发，为了省去每次搭建环境在网上查找的多余时间，很久就想进行一次梳理并且把一些东西记录下来，方便下次搭建环境少走一些弯路。正好这次想搭一下主从同步，因此在virtualbox 上搭建了两个环境，均是 mysql 5.7.19 + php7.1.8 + node6.10.10 + nginx1.10.2 + centos6.9</p>
<h1 id="lnmp-环境部署"><a href="#lnmp-环境部署" class="headerlink" title="lnmp 环境部署"></a>lnmp 环境部署</h1><h2 id="安装-mysql"><a href="#安装-mysql" class="headerlink" title="安装 mysql"></a>安装 mysql</h2><p>我是下载mysql的yum源的rpm包进行安装<br>去 <a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="external">官网yum列表</a> 中，找到你对应的版本源包地址    如图：<br><img title="yum源" src="http://ow2cpubxz.bkt.clouddn.com/images/lnmp/mysql_yum.png"></p>
<p>点击 Download<br><img title="yum下载" src="http://ow2cpubxz.bkt.clouddn.com/images/lnmp/mysql_download.png"></p>
<img title="yumlink" src="http://ow2cpubxz.bkt.clouddn.com/images/lnmp/mysql_yum_link.png">
<p>复制其中的下载链接, 进入centos 终端</p>
<pre><code>
  $ cd /tag

  $ wget https//dev.mysql.com/get/mysql57-community-release-el6-11.noarch.rpm

  $ rpm -Uvh mysql57-community-release-el6-11.noarch.rpm
</code></pre><p>通过命令 <code>ls /etc/yum.repos.d</code> 查看源是否加载成功</p>
<img title="mysql_linux_yum" src="http://ow2cpubxz.bkt.clouddn.com/images/lnmp/mysql_linux_yum.png">
<h4 id="通过yum源安装mysql"><a href="#通过yum源安装mysql" class="headerlink" title="通过yum源安装mysql"></a>通过yum源安装mysql</h4><pre><code>$ yum install mysql-community-server

$ service mysqld start  # 启动服务

$ grep &#39;temporary password&#39; /var/log/mysqld.log #查看初始密码

# 去修改初始密码

$ mysql -u root -p
# 输入初始密码

mysql&gt; alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;YourNewPwd&#39;;
</code></pre><p>mysql 安装完毕</p>
<h2 id="安装php7-1"><a href="#安装php7-1" class="headerlink" title="安装php7.1"></a>安装php7.1</h2><p>同样是使用yum源安装</p>
<p>首先 将以下两个源 引入</p>
<pre><code>$ rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm

$ rpm -Uvh https://mirror.webtatic.com/yum/el6/latest.rpm
</code></pre><p>加载完毕后可以通过yum search php71 查看相应的安装包</p>
<p>以下根据情况选择安装</p>
<pre><code># 基础
$ yum install php71w -y

$ yum install php71w-devel -y  # 此处要安装devel 包 不然找不到php命令
# nginx连接使用
$ yum install php71w-fpm -y
# 宽字节
$ yum install php71w-mbstring -y
# mysql相关
$ yum install php71w-mysqlnd -y
# redis扩展
$ yum install php71w-pecl-redis -y
# 加密使用
$ yum install php71w-mcrypt -y
# 性能加速 php5.5 以上使用
$ yum install php71w-opcache -y
</code></pre><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><p>用yum 默认安装就可以</p>
<pre><code>$ yum install nginx -y
$ service nginx start
</code></pre><h2 id="安装nodejs-npm"><a href="#安装nodejs-npm" class="headerlink" title="安装nodejs npm"></a>安装nodejs npm</h2><p>由于项目中会用到nodejs，同时现在的现代前端开发都通过npm进行包管理，因此也记下nodejs的搭建</p>
<p>在 <a href="https://nodejs.org/dist/" target="_blank" rel="external">node版本列表中</a> 找到你需要的版本<br>此处我安装的是<code>v6.11.1</code>的版本</p>
<img title="node列表" src="http://ow2cpubxz.bkt.clouddn.com/images/lnmp/node_list.png">
<p>点击进入后， 会有各个平台的下载包<br><img title="node下载列表" src="http://ow2cpubxz.bkt.clouddn.com/images/lnmp/node_down.png"></p>
<p>比较懒的朋友可以直接下载已编译好的包，省去自己编译的麻烦了，我就是比较懒的 😁</p>
<p>复制下载链接， 进入终端</p>
<pre><code>$ cd /tmp

$ wget https://nodejs.org/dist/v6.11.1/node-v6.11.1-linux-x64.tar.gz

$ tar -zxvf node-v6.11.1-linux-x64.tar.gz
</code></pre><p>因为已经编译好了，只需要把解压后文件中的bin内的命令文件软连接到系统的命令就可以了</p>
<pre><code>$ ln -s /tmp/node-v6.11.1-linux-x64/bin/node /usr/local/bin/node

$ ln -s /tmp/node-v6.11.1-linux-x64/bin/npm /usr/local/bin/npm
</code></pre><p>通过node -v和npm -v查看是否正常</p>
<h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>朋友们应该知道，centos yum内置的git 版本只有1.7几 是不能正常使用的，需要升级到新版的git</p>
<p>其间安装git也遇到个小坑，也记一下，万一有朋友遇到跟我一样的问题呢，或者下次我再安装的时候出现问题呢</p>
<p>我们下载git的源码包编译安装</p>
<p>戳 <a href="https://www.kernel.org/pub/software/scm/git/" target="_blank" rel="external">git下载列表</a> 去下载你想要的版本， 这里我下载的2.14.0的<br>同样复制下载链接，进入终端下载</p>
<pre><code>$ cd /tmp

$ wget https://www.kernel.org/pub/software/scm/git/git-2.14.0.tar.gz

$ tar -zxvf git-2.14.0.tar.gz

$ cd git-2.14.0
</code></pre><blockquote>
<p>此处有坑：在编译安装之前，需要安装 <code>libcurl4-openssl-dev</code> 依赖，不然到时候git clone会出现<code>fatal: Unable to find remote helper for &#39;https&#39;</code>错误，我的服务器是没安装这个包的，因此安装完后又跑回来重新编译了一下</p>
</blockquote>
<pre><code>$ yum install libcurl4-openssl-dev -y

# 安装完成后进入解压目录

$ pwd
/tmp/git-2.14.0

$ ./configure --prefix=/usr/local/git

$ make &amp;&amp; make install
</code></pre><p>执行完毕之后 <code>ln -s /usr/local/git/bin/git /usr/local/bin/git</code><br>通过命令 <code>git -version</code> 查看是否安装成功</p>
<h1 id="mysql-主从配置"><a href="#mysql-主从配置" class="headerlink" title="mysql 主从配置"></a>mysql 主从配置</h1><p>在配置之前，先了解下mysql是如何进行主从配置的。 一般来说复制有三个步骤：</p>
<ol>
<li>在主库上把数据更改记录到二进制日志(Binary Log)中，即而进行日志事件</li>
<li>备库将主库上的日志复制到自己的中继日志(Relay Log)中</li>
<li>备库读取中继日志的事件，将其重放到备库数据上</li>
</ol>
<p>可参考下图:<br><img title="主从配置" src="http://ow2cpubxz.bkt.clouddn.com/images/lnmp/mysql_repl.png"></p>
<p>主从配置的前提是要两个数据库版本相同</p>
<p>首先在主库中，分配从库用户</p>
<pre><code>mysql&gt; GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO backup@&#39;192.168.0.*&#39; IDENTIFIED BY &#39;backuppwd&#39;;
</code></pre><p>此处只是进行了简单的配置，该账号并不能进行select或修改数据</p>
<h3 id="配置主库和从库"><a href="#配置主库和从库" class="headerlink" title="配置主库和从库"></a>配置主库和从库</h3><h4 id="主库配置"><a href="#主库配置" class="headerlink" title="主库配置"></a>主库配置</h4><p>接下来是要在主库上开启一些设置，配置其打开二进制文件并指定一个独一无二的服务器id(server ID)，在主库的<code>my.cnf</code>文件中，增加或修改：</p>
<pre><code>log_bin = mysql-bin
server_id = 1  # 通常设为1 但是不定
</code></pre><p>如果之前没有设置<code>log_bin</code>选项，则需要重启mysql 服务<br>为确保二进制日志文件是否创建，输入<code>SHOW MASTER STATUS</code>命令查看<br>正常情况下会出现 列名<code>File</code>值为<code>mysql-bin.000001</code>的条目</p>
<h4 id="从库配置"><a href="#从库配置" class="headerlink" title="从库配置"></a>从库配置</h4><p>在从库中也需要增加类似配置,并重启mysql服务</p>
<pre><code># my.cnf

log_bin            = mysql-bin
server_id          = 2
relay_log          = /var/lib/mysql/mysql-relay-bin
log_slave_updates  = 1
read_only          = 1
</code></pre><pre><code>不要在my.cnf中设置master_port或者master_host这类选项，已被废弃，只会导致坏处不会有好处
</code></pre><h4 id="启动复制"><a href="#启动复制" class="headerlink" title="启动复制"></a>启动复制</h4><p>通过<code>CHANGE MASTER TO</code>语句连接主库启动复制</p>
<pre><code>mysql&gt; CHANGE MASTER TO MASTER_HOST=&#39;server1_host&#39;,
   - &gt; MASTER_USER=&#39;backup&#39;,
   - &gt; MASTER_PASSWORD=&#39;backuppwd&#39;,
   - &gt; MASTER_LOG_FILE=&#39;mysql_bin.000001&#39;,
   - &gt; MASTER_LOG_POS=0;
</code></pre><p><code>MASTER_LOG_POS</code>设置为0，因为要从日志的开头读起，执行完上述语句后，通过<code>SHOW SLAVE STATUS\G;</code>命令查看是否正确执行<br><img title="mysql_slave" src="http://ow2cpubxz.bkt.clouddn.com/images/lnmp/mysql_slave.png"></p>
<p>其中标红的正常应该是4和4，因为我这里的截图是配置完执行过复制后的状态，而且其中的<code>mysql-bin</code>文件的后缀应该是000001</p>
<p>运行 <code>START SLAVE;</code> 进行复制<br>该命令如果没有错误，再执行<code>SHOW SLAVE STATUS\G;</code> 应该就能看到两个数值增加并一致了</p>
<p>现在在主库中随意建一个表 会发现 在slave这个数据库中 也出现了，至此 最基本的主备复制模式 搭建完成 ，后续再了解下另外几种模式的搭建与各自的区别。有：主-主(双主复制)、主-主(主动-被动)、环形复制等</p>
]]></content>
      
        <categories>
            
            <category> 服务器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> 服务器 </tag>
            
            <tag> node </tag>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
